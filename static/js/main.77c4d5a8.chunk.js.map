{"version":3,"sources":["reducers/listReducer.js","contexts/ListContext.js","components/Navbar.js","components/ListDetails.js","components/Tasks.js","components/ListForm.js","components/ListHeader.js","App.js","serviceWorker.js","index.js"],"names":["listReducer","state","action","type","concat","Object","toConsumableArray","title","task","id","uuid","filter","ListContext","createContext","ListContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","tasks","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","className","react_router_dom","to","ListDetails","_ref","useContext","onClick","aria-hidden","Tasks","length","map","components_ListDetails","key","NewTaskForm","_useState","useState","_useState2","setTitle","onSubmit","e","preventDefault","placeholder","onChange","target","required","ListHeader","App","contexts_ListContext","components_Navbar","components_ListHeader","components_Tasks","ListForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAEaA,EAAc,SAACC,EAAOC,GACjC,OAAOA,EAAOC,MACZ,IAAK,WACH,SAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAWJ,GAAX,CAAkB,CAChBM,MAAOL,EAAOM,KAAKD,MACnBE,GAAIC,SAER,IAAK,cACH,OAAOT,EAAMU,OAAO,SAAAH,GAAI,OAAIA,EAAKC,KAAOP,EAAOO,KACjD,QACE,OAAOR,ICTAW,EAAcC,0BAiBZC,EAfa,SAACC,GAAU,IAAAC,EACXC,qBAAWjB,EAAa,GAAI,WACpD,IAAMkB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,KAHRK,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAW,EAAA,GAC9BS,EAD8BF,EAAA,GACvBG,EADuBH,EAAA,GAQrC,OAHAI,oBAAU,WACRR,aAAaS,QAAQ,QAASP,KAAKQ,UAAUJ,KAC5C,CAACA,IAEFK,EAAAC,EAAAC,cAACpB,EAAYqB,SAAb,CAAsBC,MAAO,CAACT,QAAOC,aACjCX,EAAMoB,WCDCC,EAVA,WACb,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,yBAAvB,oBCIOG,EATK,SAAAC,GAAc,IAAXjC,EAAWiC,EAAXjC,KACbkB,EAAagB,qBAAW9B,GAAxBc,SACR,OACEI,EAAAC,EAAAC,cAAA,MAAIK,UAAU,kBAAkBM,QAAS,kBAAMjB,EAAS,CAAEvB,KAAM,cAAeM,GAAID,EAAKC,OACpFD,EAAKD,MAAOuB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,uCAAuCO,cAAY,WCYrEC,EAfD,WAAM,IACVpB,EAAUiB,qBAAW9B,GAArBa,MACR,OAAOA,EAAMqB,OACXhB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,mBACVZ,EAAMsB,IAAI,SAAAvC,GACV,OAASsB,EAAAC,EAAAC,cAACgB,EAAD,CAAaxC,KAAMA,EAAMyC,IAAKzC,EAAKC,QAIhDqB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,mBAAd,uCCUWa,EApBK,WAAM,IAChBxB,EAAagB,qBAAW9B,GAAxBc,SADgByB,EAEEC,mBAAS,IAFXC,EAAAhD,OAAAmB,EAAA,EAAAnB,CAAA8C,EAAA,GAEjB5C,EAFiB8C,EAAA,GAEVC,EAFUD,EAAA,GAUxB,OACEvB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,mBACZP,EAAAC,EAAAC,cAAA,QAAMuB,SATW,SAACC,GACpBA,EAAEC,iBACF/B,EAAS,CAACvB,KAAM,WAAYK,KAAM,CAChCD,WAEF+C,EAAS,KAIuBjB,UAAU,eACtCP,EAAAC,EAAAC,cAAA,SAAO7B,KAAK,OAAOuD,YAAY,WAAWxB,MAAO3B,EAAOoD,SAAU,SAACH,GAAD,OAAOF,EAASE,EAAEI,OAAO1B,QAAQ2B,UAAQ,IAC3G/B,EAAAC,EAAAC,cAAA,SAAOK,UAAU,YAAYlC,KAAK,SAAS+B,MAAM,gBCJ1C4B,EAVI,WAAM,IACfrC,EAAUiB,qBAAW9B,GAArBa,MACR,OACEK,EAAAC,EAAAC,cAAA,MAAIK,UAAU,qBACZP,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBAAiBP,EAAMqB,UCuBdiB,MAvBf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,0BACZP,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,cCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77c4d5a8.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\n\nexport const listReducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_TASK':\n      return [...state, {\n        title: action.task.title,\n        id: uuid()\n      }]\n    case 'REMOVE_TASK':\n      return state.filter(task => task.id !== action.id)\n    default:\n      return state\n  }\n}\n\nexport default listReducer;","import React, { createContext, useReducer, useEffect } from 'react';\nimport { listReducer } from '../reducers/listReducer';\n\nexport const ListContext = createContext();\n\nconst ListContextProvider = (props) => {\n  const [tasks, dispatch] = useReducer(listReducer, [], () => {\n    const localData = localStorage.getItem('tasks');\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks]);\n  return (\n    <ListContext.Provider value={{tasks, dispatch}}>\n      { props.children }\n    </ListContext.Provider>\n  )\n}\n\nexport default ListContextProvider","import React from 'react';\nimport { Link } from 'react-router-dom'\n\n// devNote: functional component since this will not have state\nconst Navbar = () => {\n  return ( \n    <nav className=\"nav-wrapper white\">\n      <div className=\"container\">\n        <Link to='/' className=\"brand-logo black-text\">Minimal Lists</Link>\n      </div>\n    </nav>\n  );\n}\n \nexport default Navbar;","import React, { useContext } from 'react';\nimport { ListContext } from '../contexts/ListContext';\n\nconst ListDetails = ({ task }) => {\n  const { dispatch } = useContext(ListContext);\n  return (\n    <li className=\"collection-item\" onClick={() => dispatch({ type: 'REMOVE_TASK', id: task.id})}>\n      { task.title }<i className=\"{'fa right' + this.state.taskStatus}\" aria-hidden=\"true\"></i>\n    </li>\n  );\n}\n\nexport default ListDetails;","import React, { useContext } from 'react';\nimport { ListContext } from '../contexts/ListContext';\nimport ListDetails from './ListDetails';\n\nconst Tasks = () => {\n  const { tasks } = useContext(ListContext);\n  return tasks.length ? (\n    <li className=\"collection-item\">\n      { tasks.map(task => {\n        return ( <ListDetails task={task} key={task.id} />)\n      })}\n    </li>\n  ) : (\n    <li className=\"collection-item\">\n      You have completed all your tasks.\n    </li>\n  );\n}\n\nexport default Tasks;","import React, { useContext, useState } from 'react';\nimport { ListContext } from '../contexts/ListContext';\n\nconst NewTaskForm = () => {\n  const { dispatch } = useContext(ListContext);\n  const [title, setTitle] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch({type: 'ADD_TASK', task: {\n      title\n    }});\n    setTitle('');\n  }\n  return (\n    <li className=\"collection-item\">\n      <form onSubmit={handleSubmit} className=\"input-field\">\n        <input type=\"text\" placeholder=\"New task\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n        <input className=\"btn black\" type=\"submit\" value=\"Add Task\" />\n      </form>\n    </li>\n  )\n}\n\nexport default NewTaskForm;","import React, { useContext } from 'react';\nimport { ListContext } from '../contexts/ListContext';\n\nconst ListHeader = () => {\n  const { tasks } = useContext(ListContext);\n  return (\n    <li className=\"collection-header\">\n      <h4>My List</h4>\n      <p>Task Count: { tasks.length }</p>\n    </li>\n  )\n}\n\nexport default ListHeader","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ListContextProvider from './contexts/ListContext';\nimport Navbar from './components/Navbar';\nimport Tasks from './components/Tasks';\nimport NewListForm from './components/ListForm';\nimport ListHeader from './components/ListHeader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <ListContextProvider>\n          <Navbar />\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <ul className=\"collection with-header\">\n                  <ListHeader />\n                  <Tasks />\n                  <NewListForm />\n                </ul>\n              </div>\n            </div>\n          </div>\n        </ListContextProvider>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}